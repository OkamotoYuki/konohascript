using konoha.proc.*;
//using konoha.memcached.*;

Proc mailbox;

@Around void System.exit(int status) {
	if (mailbox != null) {
		mailbox.terminate();
	}
	proceed(status);
}

void evalMsg(String role, String task, String msg) {
	String host = "192.168.0.201"; /* diag */
	int port = 11211;
	Proc p = new Proc([$konoha.bin.path, "-a", "--enforce-security=" + role, "--logcached=" + host + ":" + port, "-"]);
	OutputStream ous = p.getOutputStream();
	//Memcache mc = new Memcache(host, port);
	//mc.add(task + ":start", (to String)new Date(), 0, 0);
	//mc.replace(task + ":start", (to String)new Date(), 0, 0);
	ous << "using konoha.memcached.*;" << EOL;
	ous << "Memcache ctxid_memcache = new Memcache(\"" << host << "\", " << port << ");" << EOL;
	ous << "ctxid_memcache.add(\"" + task + "\", CTX.getTrace(), 0, 0);" << EOL;
	ous << "ctxid_memcache.replace(\"" + task + "\", CTX.getTrace(), 0, 0);" << EOL;
	ous << "ctxid_memcache.add(\"" + task + ":start\", (to String)new Date(), 0, 0), 0, 0);" << EOL;
	ous << "ctxid_memcache.replace(\"" + task + ":start\", (to String)new Date(), 0, 0);" << EOL;
	ous << msg << EOL;
	ous << "ctxid_memcache.add(\"" + task + ":end\", (to String)new Date(), 0, 0);" << EOL;
	ous << "ctxid_memcache.replace(\"" + task + ":end\", (to String)new Date(), 0, 0);" << EOL;
	ous.close();
	InputStream ins = p.getInputStream();
	foreach(String s in ins) {
		OUT << s << EOL;
	}
	InputStream err = p.getErrorInputStream();
	foreach(String s in err) {
		ERR << s << EOL;
	}
	p.wait();
	//mc.add(task + ":end", (to String)new Date(), 0, 0);
	//mc.replace(task + ":end", (to String)new Date(), 0, 0);
}

void main(String[] args)
{
	int port = 2000;
	if (|args| > 0) {
		port = (to int)args[0];
	}

	OUT << "start an ActorServer with port: " + (to String)port << EOL;
	mailbox = new Proc([$konoha.bin.path, $konoha.script.path + "/mailbox.k", (String)port]);
	InputStream ins = mailbox.getInputStream();

	String recvmsg = "";
	String task = "";
	String role = "";
	while (mailbox.isAlive()) {
		String line = ins.readLine();
		if (line == "ping") continue;
		if (role == "") {
			String[] matches = line.match($/<<\s*[a-zA-Z0-9\.\-_]+:[a-zA-Z0-9\.\-_]+$/);
			if (|matches| > 0) {
				// start of Task
				String[] role_task = matches[0].replace($/<<\s*([a-zA-Z0-9\.\-_]+):([a-zA-Z0-9\.\-_]+)$/,
						"$1:$2").split(":");
				role = role_task[0];
				task = role_task[1];
				continue;
			}
		} else {
			String[] matches = line.match($/>>\s*[a-zA-Z0-9\.\-_]+:[a-zA-Z0-9\.\-_]+$/);
			if (|matches| > 0 &&
					role + ":" + task == matches[0].replace($/>>\s*([a-zA-Z0-9\.\-_]+):([a-zA-Z0-9\.\-_]+)$/,
						"$1:$2")) {
				// end of Task
				evalMsg(role, task, recvmsg);
				recvmsg = "";
				role = "";
				task = "";
				continue;
			}
		}
		recvmsg += line + EOL;
	}
}
