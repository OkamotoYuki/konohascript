Index: mpi.k
===================================================================
--- mpi.k	(revision 676)
+++ mpi.k	(working copy)
@@ -28,14 +28,7 @@
 @Native String MPIComm.getProcessorName();
 @Native int    MPIComm.barrier();
 
-@Native class MPIData;
-@Native MPIData : (int[] ia);
-@Native MPIData : (float[] fa);
-@Native MPIData : (byte[] ba);
-@Native int[]   : (MPIData md);
-@Native float[] : (MPIData md);
-@Native byte[]  : (MPIData md);
-@Native Class MPIData.getContentClass();
+@Public @Native Class Pointer.getContentClass();
 
 @Native class MPIRequest;
 @Native boolean MPIRequest.test();
@@ -43,28 +36,28 @@
 @Native boolean MPIRequest.cancel();
 
 @Native class MPIOp;
-@Native MPIOp MPIOp.new(Func<MPIData,MPIData> func, Boolean commutable);
+@Native MPIOp MPIOp.new(Func<Pointer,Pointer> func, Boolean commutable);
 
 
 /* ------------------------------------------------------------------------ */
 /* Point-to-Point Communication API */
 
-@Native boolean    MPIComm.send(MPIData sdata, int offset, int count, int dest_rank, int tag);
-@Native boolean    MPIComm.recv(MPIData rdata, int offset, int count, int src_rank, int tag);
-@Native boolean    MPIComm.sendrecv(MPIData sdata, int soffset, int count, int dest_rank, int stag,
-                                    MPIData rdata, int roffset, int count, int src_rank, int rtag);
-@Native MPIRequest MPIComm.iSend(MPIData sdata, int offset, int count, int dest_rank, int tag, MPIRequest _);
-@Native MPIRequest MPIComm.iRecv(MPIData rdata, int offset, int count, int src_rank, int tag, MPIRequest _);
+@Native boolean    MPIComm.send(Pointer sdata, int count, int dest_rank, int tag);
+@Native boolean    MPIComm.recv(Pointer rdata, int count, int src_rank, int tag);
+@Native boolean    MPIComm.sendrecv(Pointer sdata, int count, int dest_rank, int stag,
+                                    Pointer rdata, int count, int src_rank, int rtag);
+@Native MPIRequest MPIComm.iSend(Pointer sdata, int count, int dest_rank, int tag, MPIRequest _);
+@Native MPIRequest MPIComm.iRecv(Pointer rdata, int count, int src_rank, int tag, MPIRequest _);
 
 
 /* ------------------------------------------------------------------------ */
 /* Collective Communication API */
 
-@Native boolean MPIComm.bcast(MPIData sdata, int offset, int count, int root_rank);
-@Native boolean MPIComm.scatter(MPIData sdata, int soffset, int scount, MPIData rdata, int roffset, int rcount, int root_rank);
-@Native boolean MPIComm.gather(MPIData sdata, int soffset, int scount, MPIData rdata, int roffset, int rcount, int root_rank);
-@Native boolean MPIComm.allGather(MPIData sdata, int soffset, int scount, MPIData rdata, int roffset, int rcount);
-@Native boolean MPIComm.allToAll(MPIData sdata, int soffset, int scount, MPIData rdata, int roffset, int rcount);
-@Native boolean MPIComm.reduce(MPIData sdata, int soffset, MPIData rdata, int roffset, int rcount, MPIOp op, int root_rank);
-@Native boolean MPIComm.allReduce(MPIData sdata, int soffset, MPIData rdata, int roffset, int rcount, MPIOp op);
+@Native boolean MPIComm.bcast(Pointer sdata, int count, int root_rank);
+@Native boolean MPIComm.scatter(Pointer sdata, int scount, Pointer rdata, int rcount, int root_rank);
+@Native boolean MPIComm.gather(Pointer sdata, int scount, Pointer rdata, int rcount, int root_rank);
+@Native boolean MPIComm.allGather(Pointer sdata, int scount, Pointer rdata, int rcount);
+@Native boolean MPIComm.allToAll(Pointer sdata, int scount, Pointer rdata, int rcount);
+@Native boolean MPIComm.reduce(Pointer sdata, Pointer rdata, int rcount, MPIOp op, int root_rank);
+@Native boolean MPIComm.allReduce(Pointer sdata, Pointer rdata, int rcount, MPIOp op);
 
Index: mpi.c
===================================================================
--- mpi.c	(revision 676)
+++ mpi.c	(working copy)
@@ -9,7 +9,7 @@
 
 static void knh_MPIComm_init(CTX ctx, knh_RawPtr_t *o)
 {
-	knh_MPIComm_t *comm = (knh_MPIComm_t*)o;
+	MPIC(comm, o);
 	MPIC_COMM(comm) = 0;
 	MPIC_RANK(comm) = -1;
 	MPIC_SIZE(comm) = -1;
@@ -27,37 +27,12 @@
 
 static void knh_MPIComm_free(CTX ctx, knh_RawPtr_t *o)
 {
-	knh_MPIComm_t *comm = (knh_MPIComm_t*)o;
+	MPIC(comm, o);
 	if (comm->proc_name != NULL) {
 		free(comm->proc_name); // allocated by strdup
 	}
 }
 
-static void knh_MPIData_init(CTX ctx, knh_RawPtr_t *o)
-{
-	knh_MPIData_t *data = (knh_MPIData_t*)o;
-	data->v = NULL;
-	data->type = MPI_BYTE;
-}
-
-static void knh_MPIData_reftrace(CTX ctx, knh_RawPtr_t *p FTRARG)
-{
-	MPID(data, p);
-	if (data->v != NULL) {
-		KNH_ENSUREREF(ctx, 1);
-		KNH_ADDREF(ctx, data->v);
-		KNH_SIZEREF(ctx);
-	}
-}
-
-static void knh_MPIData_p(CTX ctx, knh_OutputStream_t *w, knh_RawPtr_t *o, int level)
-{
-	knh_MPIData_t *data = (knh_MPIData_t*)o;
-	const knh_ClassTBL_t* tbl = ClassTBL(MPID_CID(data));
-	knh_ClassDef_t *cdefbuf = (knh_ClassDef_t*)tbl->cdef;
-	cdefbuf->p(ctx, w, (knh_RawPtr_t*)data->o, level);
-}
-
 static void knh_MPIOp_init(CTX ctx, knh_RawPtr_t *o)
 {
 	MPIO(op, o);
@@ -88,14 +63,6 @@
 	cdef->free = knh_MPIComm_free;
 }
 
-DEFAPI(void) defMPIData(CTX ctx, knh_class_t cid, knh_ClassDef_t *cdef)
-{
-	cdef->name = "MPIData";
-	cdef->init = knh_MPIData_init;
-	cdef->reftrace = knh_MPIData_reftrace;
-	cdef->p = knh_MPIData_p;
-}
-
 DEFAPI(void) defMPIRequest(CTX ctx, knh_class_t cid, knh_ClassDef_t *cdef)
 {
 	cdef->name = "MPIRequest";
@@ -114,7 +81,7 @@
 
 static void knh_MPI_initWorld(CTX ctx, knh_class_t cid)
 {
-	knh_MPIComm_t *world = new_O(MPIComm, cid);
+	MPIC(world, new_O(MPIComm, cid));
 	world->comm = MPI_COMM_WORLD;
 	MPI_Comm_rank(world->comm, &MPIC_RANK(world));
 	MPI_Comm_size(world->comm, &MPIC_SIZE(world));
@@ -123,7 +90,7 @@
 
 static void knh_MPI_initSelf(CTX ctx, knh_class_t cid)
 {
-	knh_MPIComm_t *self = new_O(MPIComm, cid);
+	MPIC(self, new_O(MPIComm, cid));
 	self->comm = MPI_COMM_SELF;
 	MPI_Comm_rank(self->comm, &MPIC_RANK(self));
 	MPI_Comm_size(self->comm, &MPIC_SIZE(self));
@@ -132,8 +99,8 @@
 
 static void knh_MPI_initParent(CTX ctx, knh_class_t cid)
 {
-	knh_MPIComm_t *parent = new_O(MPIComm, cid);
-	if (MPI_Comm_get_parent(&(parent->comm)) == MPI_SUCCESS) {
+	MPIC(parent, new_O(MPIComm, cid));
+	if (MPI_Comm_get_parent(&MPIC_COMM(parent)) == MPI_SUCCESS) {
 		MPI_Comm_rank(parent->comm, &MPIC_RANK(parent));
 		MPI_Comm_size(parent->comm, &MPIC_SIZE(parent));
 		knh_addClassConst(ctx, cid, new_String(ctx, "PARENT"), (Object*)parent);
@@ -158,9 +125,9 @@
 {
 	knh_IntData_t *d;
 	for (d = &MPIConstOp[0]; d->ivalue > 0; d++) {
-		knh_MPIOp_t *op = new_O(MPIOp, cid);
-		op->op = (MPI_Op)d->ivalue;
-		op->func = NULL;
+		MPIO(op, new_O(MPIOp, cid));
+		MPIO_OP(op) = (MPI_Op)d->ivalue;
+		MPIO_OPFUNC(op) = NULL;
 		knh_addClassConst(ctx, cid, new_String(ctx, d->name), (Object*)op);
 	}
 }
@@ -176,10 +143,6 @@
 	}
 }
 
-DEFAPI(void) constMPIData(CTX ctx, knh_class_t cid, const knh_LoaderAPI_t *kapi)
-{
-}
-
 DEFAPI(void) constMPIRequest(CTX ctx, knh_class_t cid, const knh_LoaderAPI_t *kapi)
 {
 }
Index: konoha_mpi.h
===================================================================
--- konoha_mpi.h	(revision 676)
+++ konoha_mpi.h	(working copy)
@@ -8,20 +8,6 @@
 #include <mpi.h>
 
 /* ------------------------------------------------------------------------ */
-/* Konoha Type */
-
-//## type IArray Array 0 Int;
-
-//## type FArray Array 0 Float;
-
-#ifndef IS_IArray
-#define IS_IArray(o) (IS_bArray(o) && O_p1(o) == CLASS_Int)
-#endif
-#ifndef IS_FArray
-#define IS_FArray(o) (IS_bArray(o) && O_p1(o) == CLASS_Float)
-#endif
-
-/* ------------------------------------------------------------------------ */
 /* MPI Communicator */
 
 //## class MPIComm Object;
@@ -37,45 +23,25 @@
 #define MPIC_SIZE(c) ((c)->numprocs)
 #define MPIC_RANK(c) ((c)->myrank)
 #define MPIC_COMM(c) ((c)->comm)
+#define MPIC(v, o) knh_MPIComm_t *v = (knh_MPIComm_t*)o
 
-#define KNH_MPI_SUCCESS(res) ((res) == MPI_SUCCESS) /* defined in mpi.h */
-#define MPIC(v, o) knh_MPIComm_t *v = ((knh_MPIComm_t*)o)
-
 /* ------------------------------------------------------------------------ */
-/* MPI Data */
+/* Pointer compat. */
 
-//## class MPIData Object;
+#define PTR_ADDR(pt) ((pt)->ptr)
+#define PTR_REF(pt)  ((pt)->gcref)
+#define PTR_CID(pt)  (PTR_REF(pt)->h.cTBL->cid)
+#define PTR_TYPE(pt) knh_MPI_getDataType(pt)
+#define PTR_SIZE(pt) knh_MPI_getDataSize(pt)
+#define PTR_CAP(pt)  knh_MPI_getDataCapacity(pt)
+#define PTR(v, o)      knh_Pointer_t *v = (knh_Pointer_t*)o
 
-typedef struct {
-	knh_hObject_t h;
-	union {
-		knh_Object_t *o;
-		knh_Int_t    *i;
-		knh_Float_t  *f;
-		knh_Array_t  *a;
-		knh_Bytes_t  *b;
-		knh_String_t *s;
-		void *v;
-	};
-	MPI_Datatype type;
-	knh_class_t cid;
-} knh_MPIData_t;
+MPI_Datatype knh_MPI_getDataType(knh_Pointer_t *ptr);
+int          knh_MPI_getDataSize(knh_Pointer_t *ptr);
+int          knh_MPI_getDataCapacity(knh_Pointer_t *ptr);
+void knh_MPI_expandData(CTX ctx, knh_sfp_t *sfp, knh_Pointer_t *ptr, int count, int *inc);
+int  knh_MPI_plusDataSize(knh_Pointer_t *ptr, int count);
 
-#define MPID_TYPE(data) (data->type)
-#define MPID_CID(data) (data->cid)
-#define MPID_ADDR(data, offset) knh_MPIData_getAddr(data, offset)
-#define MPID_SIZE(data) knh_MPIData_getSize(data)
-#define MPID_INITCID(data) (MPID_CID(data) = O_cid(data->o))
-#define MPID(v, o) knh_MPIData_t *v = ((knh_MPIData_t*)o)
-
-void* knh_MPIData_getAddr(knh_MPIData_t *data, int offset);
-void  knh_MPIData_expand(CTX ctx, knh_MPIData_t *data, int offset, int *count, int *inc);
-int   knh_MPIData_getSize(knh_MPIData_t *data);
-int   knh_MPIData_incSize(knh_MPIData_t *data, int count);
-int   knh_MPIData_getCapacity(knh_MPIData_t *data);
-void  knh_MPIData_checkCount(knh_MPIData_t *data, int offset, int *count);
-
-
 /* ------------------------------------------------------------------------ */
 /* MPI Request */
 
@@ -84,15 +50,16 @@
 typedef struct {
 	knh_hObject_t h;
 	MPI_Request reqt;
-	knh_MPIData_t *data;
+	knh_Pointer_t *ptr;
 	int incflag;
 } knh_MPIRequest_t;
 
 #define MPIR_REQ(req) (&((req)->reqt))
-#define MPIR_DATA(req) ((req)->data)
-#define MPIR_TYPE(req) (MPID_TYPE(MPIR_DATA(req)))
+#define MPIR_PTR(req) ((req)->ptr)
+#define MPIR_TYPE(req) (PTR_TYPE(MPIR_PTR(req)))
 #define MPIR_INC(req) ((req)->incflag)
 #define Request_new(ctx, req) (req) = new_O(MPIRequest, O_cid(req))
+#define MPIR(v, o) knh_MPIRequest_t *v = (knh_MPIRequest_t*)o
 
 /* ------------------------------------------------------------------------ */
 /* MPI Operator */
@@ -105,7 +72,7 @@
 	MPI_User_function *func;
 } knh_MPIOp_t;
 
-//## type MPIOpFunc    Func  0 MPIData MPIData Int;
+//## type MPIOpFunc    Func  0 Pointer Pointer Int;
 
 #define MPIO_OP(o) ((o)->op)
 #define MPIO_OPFUNC(o) ((o)->func)
Index: src/array.c
===================================================================
--- src/array.c	(revision 676)
+++ src/array.c	(working copy)
@@ -191,9 +191,9 @@
 
 static print_func getPrintFunc(knh_Array_t *base)
 {
-	if (IS_IArray(base))
+	if (IS_ArrayInt(base))
 		return printIA;
-	else if (IS_FArray(base))
+	else if (IS_ArrayFloat(base))
 		return printFA;
 	else
 		return printOA;
Index: src/coll.c
===================================================================
--- src/coll.c	(revision 676)
+++ src/coll.c	(working copy)
@@ -1,53 +1,50 @@
 #include "../konoha_mpi.h"
 
 /* ------------------------------------------------------------------------ */
-//## method boolean MPIComm.bcast(MPIData data, int offset, int count, int root_rank);
+//## method boolean MPIComm.bcast(Pointer data, int count, int root_rank);
 
 KMETHOD MPIComm_bcast(CTX ctx, knh_sfp_t *sfp _RIX)
 {
 	MPIC(comm, sfp[0].o);
-	MPID(data, sfp[1].o);
-	int offset = Int_to(int, sfp[2]);
-	int count = Int_to(int, sfp[3]);
-	int root_rank = Int_to(int, sfp[4]);
+	PTR(data, sfp[1].o);
+	int count = Int_to(int, sfp[2]);
+	int root_rank = Int_to(int, sfp[3]);
 	int ret = 0;
 	if (MPIC_RANK(comm) == root_rank) {
 		if (count == 0) {
-			count = MPID_SIZE(data) - offset;
+			count = PTR_SIZE(data);
 			MPI_Bcast(&count, 1, MPI_INT, root_rank, MPIC_COMM(comm)); /* bcast for buffer_length */
 		}
-		MPI_Bcast(MPID_ADDR(data, offset), count, MPID_TYPE(data), root_rank, MPIC_COMM(comm));
+		MPI_Bcast(PTR_ADDR(data), count, PTR_TYPE(data), root_rank, MPIC_COMM(comm));
 		ret = 1;
 	} else {
 		if (count == 0) {
 			MPI_Bcast(&count, 1, MPI_INT, root_rank, MPIC_COMM(comm)); /* bcast for buffer_length */
 		}
 		int inc = 0;
-		knh_MPIData_expand(ctx, data, offset, &count, &inc);
-		knh_MPIData_incSize(data, inc);
-		MPI_Bcast(MPID_ADDR(data, offset), count, MPID_TYPE(data), root_rank, MPIC_COMM(comm));
+		knh_MPI_expandData(ctx, sfp, data, count, &inc);
+		knh_MPI_plusDataSize(data, inc);
+		MPI_Bcast(PTR_ADDR(data), count, PTR_TYPE(data), root_rank, MPIC_COMM(comm));
 		ret = 1;
 	}
 	RETURNb_(ret);
 }
 
 /* ------------------------------------------------------------------------ */
-//## method boolean MPIComm.scatter(MPIData sdata, int soffset, int scount, MPIData rdata, int roffset, int rcount, int root_rank);
+//## method boolean MPIComm.scatter(Pointer sdata, int scount, Pointer rdata, int rcount, int root_rank);
 
 KMETHOD MPIComm_scatter(CTX ctx, knh_sfp_t *sfp _RIX)
 {
 	MPIC(comm, sfp[0].o);
-	MPID(sdata, sfp[1].o);
-	int soffset = Int_to(int, sfp[2]);
-	int scount = Int_to(int, sfp[3]);
-	MPID(rdata, sfp[4].o);
-	int roffset = Int_to(int, sfp[5]);
-	int rcount = Int_to(int, sfp[6]);
-	int root_rank = Int_to(int, sfp[7]);
+	PTR(sdata, sfp[1].o);
+	int scount = Int_to(int, sfp[2]);
+	PTR(rdata, sfp[3].o);
+	int rcount = Int_to(int, sfp[4]);
+	int root_rank = Int_to(int, sfp[5]);
 	int ret = 0;
 	if (scount == 0) {
 		if (MPIC_RANK(comm) == root_rank) {
-			int ssize = MPID_SIZE(sdata) - soffset;
+			int ssize = PTR_SIZE(sdata);
 			scount = ssize / MPIC_SIZE(comm);
 			if (ssize % MPIC_SIZE(comm) != 0) scount++;
 		}
@@ -55,46 +52,40 @@
 	}
 	if (rcount == 0) rcount = scount;
 	int inc = 0;
-	knh_MPIData_expand(ctx, rdata, roffset, &rcount, &inc);
-	knh_MPIData_incSize(rdata, inc);
-	MPI_Scatter(MPID_ADDR(sdata, soffset), scount, MPID_TYPE(sdata), MPID_ADDR(rdata, roffset), rcount, MPID_TYPE(rdata), root_rank, MPIC_COMM(comm));
+	knh_MPI_expandData(ctx, sfp, rdata, rcount, &inc);
+	knh_MPI_plusDataSize(rdata, inc);
+	MPI_Scatter(PTR_ADDR(sdata), scount, PTR_TYPE(sdata), PTR_ADDR(rdata), rcount, PTR_TYPE(rdata), root_rank, MPIC_COMM(comm));
 	ret = 1;
 	RETURNb_(ret);
 }
 
 /* ------------------------------------------------------------------------ */
-//## method boolean MPIComm.gather(MPIData sdata, int soffset, int scount,
-//##                               MPIData rdata, int roffset, int rcount, int root_rank);
+//## method boolean MPIComm.gather(Pointer sdata, int scount, Pointer rdata, int rcount, int root_rank);
 
 KMETHOD MPIComm_gather(CTX ctx, knh_sfp_t *sfp _RIX)
 {
 	MPIC(comm, sfp[0].o);
-	MPID(sdata, sfp[1].o);
-	int soffset = Int_to(int, sfp[2]);
-	int scount = Int_to(int, sfp[3]);
-	MPID(rdata, sfp[4].o);
-	int roffset = Int_to(int, sfp[5]);
-	int rcount = Int_to(int, sfp[6]);
-	int root_rank = Int_to(int, sfp[7]);
+	PTR(sdata, sfp[1].o);
+	int scount = Int_to(int, sfp[2]);
+	PTR(rdata, sfp[3].o);
+	int rcount = Int_to(int, sfp[4]);
+	int root_rank = Int_to(int, sfp[5]);
 	int ret = 0;
 	if (scount > 0) {
 		if (MPIC_RANK(comm) == root_rank) {
-			knh_MPIData_checkCount(sdata, soffset, &scount);
 			int inc, rrcount = rcount * MPIC_SIZE(comm);
-			knh_MPIData_expand(ctx, rdata, roffset, &rrcount, &inc);
-			knh_MPIData_incSize(rdata, inc);
-			MPI_Gather(MPID_ADDR(sdata, soffset), scount, MPID_TYPE(sdata),
-					   MPID_ADDR(rdata, roffset), rcount, MPID_TYPE(rdata), root_rank, MPIC_COMM(comm));
+			knh_MPI_expandData(ctx, sfp, rdata, rrcount, &inc);
+			knh_MPI_plusDataSize(rdata, inc);
+			MPI_Gather(PTR_ADDR(sdata), scount, PTR_TYPE(sdata),
+					   PTR_ADDR(rdata), rcount, PTR_TYPE(rdata), root_rank, MPIC_COMM(comm));
 			ret = 1;
 		} else {
-			knh_MPIData_checkCount(sdata, soffset, &scount);
-			MPI_Gather(MPID_ADDR(sdata, soffset), scount, MPID_TYPE(sdata), NULL, 0, 0, root_rank, MPIC_COMM(comm));
+			MPI_Gather(PTR_ADDR(sdata), scount, PTR_TYPE(sdata), NULL, 0, 0, root_rank, MPIC_COMM(comm));
 			ret = 1;
 		}
 	} else {
-		scount = MPID_SIZE(sdata) - soffset;
+		scount = PTR_SIZE(sdata);
 		if (MPIC_RANK(comm) == root_rank) {
-			knh_MPIData_checkCount(sdata, soffset, &scount);
 			int rcounts[MPIC_SIZE(comm)];
 			int rdispls[MPIC_SIZE(comm)];
 			MPI_Gather(&scount, 1, MPI_INT, rcounts, 1, MPI_INT, root_rank, MPIC_COMM(comm));
@@ -105,22 +96,21 @@
 				rsum += rc;
 			}
 			int inc;
-			knh_MPIData_expand(ctx, rdata, roffset, &rsum, &inc);
-			knh_MPIData_incSize(rdata, inc);
-			if (rsum == 0) { // if modified in knh_MPIData_expand
+			knh_MPI_expandData(ctx, sfp, rdata, rsum, &inc);
+			knh_MPI_plusDataSize(rdata, inc);
+			if (rsum == 0) { // if modified in knh_MPI_expandData
 				for (i = 0; i < MPIC_SIZE(comm); i++) {
 					rcounts[i] = 0;
 					rdispls[i] = 0;
 				}
 			}
-			MPI_Gatherv(MPID_ADDR(sdata, soffset), scount, MPID_TYPE(sdata),
-						MPID_ADDR(rdata, roffset), rcounts, rdispls, MPID_TYPE(rdata), root_rank, MPIC_COMM(comm));
+			MPI_Gatherv(PTR_ADDR(sdata), scount, PTR_TYPE(sdata),
+						PTR_ADDR(rdata), rcounts, rdispls, PTR_TYPE(rdata), root_rank, MPIC_COMM(comm));
 			ret = 1;
 		}
 		else {
-			knh_MPIData_checkCount(sdata, soffset, &scount);
 			MPI_Gather(&scount, 1, MPI_INT, NULL, 0, MPI_INT, root_rank, MPIC_COMM(comm));
-			MPI_Gatherv(MPID_ADDR(sdata, soffset), scount, MPID_TYPE(sdata), NULL, NULL, NULL, 0, root_rank, MPIC_COMM(comm));
+			MPI_Gatherv(PTR_ADDR(sdata), scount, PTR_TYPE(sdata), NULL, NULL, NULL, 0, root_rank, MPIC_COMM(comm));
 			ret = 1;
 		}
 	}
@@ -128,30 +118,26 @@
 }
 
 /* ------------------------------------------------------------------------ */
-//## method Int MPIComm.allGather(MPIData sdata, int soffset, int scount, MPIData rdata, int roffset, int rcount);
+//## method Int MPIComm.allGather(Pointer sdata, int scount, Pointer rdata, int rcount);
 
 KMETHOD MPIComm_allGather(CTX ctx, knh_sfp_t *sfp _RIX)
 {
 	MPIC(comm, sfp[0].o);
-	MPID(sdata, sfp[1].o);
-	int soffset = Int_to(int, sfp[2]);
-	int scount = Int_to(int, sfp[3]);
-	MPID(rdata, sfp[4].o);
-	int roffset = Int_to(int, sfp[5]);
-	int rcount = Int_to(int, sfp[6]);
+	PTR(sdata, sfp[1].o);
+	int scount = Int_to(int, sfp[2]);
+	PTR(rdata, sfp[3].o);
+	int rcount = Int_to(int, sfp[4]);
 	int ret = 0;
 	if (scount > 0) {
-		knh_MPIData_checkCount(sdata, soffset, &scount);
 		int inc, rrcount = rcount * MPIC_SIZE(comm);
-		knh_MPIData_expand(ctx, rdata, roffset, &rrcount, &inc);
-		knh_MPIData_incSize(rdata, inc);
-		MPI_Allgather(MPID_ADDR(sdata ,soffset), scount, MPID_TYPE(sdata), MPID_ADDR(rdata, roffset), rcount, MPID_TYPE(rdata), MPIC_COMM(comm));
+		knh_MPI_expandData(ctx, sfp, rdata, rrcount, &inc);
+		knh_MPI_plusDataSize(rdata, inc);
+		MPI_Allgather(PTR_ADDR(sdata), scount, PTR_TYPE(sdata), PTR_ADDR(rdata), rcount, PTR_TYPE(rdata), MPIC_COMM(comm));
 		ret = 1;
 	} else {
 		int rcounts[MPIC_SIZE(comm)];
 		int rdispls[MPIC_SIZE(comm)];
-		scount = MPID_SIZE(sdata) - soffset;
-		knh_MPIData_checkCount(sdata, soffset, &scount);
+		scount = PTR_SIZE(sdata);
 		MPI_Allgather(&scount, 1, MPI_INT, rcounts, 1, MPI_INT, MPIC_COMM(comm));
 		int i, rsum = 0;
 		for (i = 0; i < MPIC_SIZE(comm); i++) {
@@ -160,33 +146,30 @@
 			rsum += rc;
 		}
 		int inc = 0;
-		knh_MPIData_expand(ctx, rdata, roffset, &rsum, &inc);
-		knh_MPIData_incSize(rdata, inc);
-		MPI_Allgatherv(MPID_ADDR(sdata, soffset), scount, MPID_TYPE(sdata), MPID_ADDR(rdata, roffset), rcounts, rdispls, MPID_TYPE(rdata), MPIC_COMM(comm));
+		knh_MPI_expandData(ctx, sfp, rdata, rsum, &inc);
+		knh_MPI_plusDataSize(rdata, inc);
+		MPI_Allgatherv(PTR_ADDR(sdata), scount, PTR_TYPE(sdata), PTR_ADDR(rdata), rcounts, rdispls, PTR_TYPE(rdata), MPIC_COMM(comm));
 		ret = 1;
 	}
 	RETURNb_(ret);
 }
 
 /* ------------------------------------------------------------------------ */
-//## method Int MPIComm.allToAll(MPIData sdata, int soffset, int scount, MPIData rdata, int roffset, int rcount);
+//## method Int MPIComm.allToAll(Pointer sdata, int scount, Pointer rdata, int rcount);
 
 KMETHOD MPIComm_allToAll(CTX ctx, knh_sfp_t *sfp _RIX)
 {
 	MPIC(comm, sfp[0].o);
-	MPID(sdata, sfp[1].o);
-	int soffset = Int_to(int, sfp[2]);
-	int scount = Int_to(int, sfp[3]);
-	MPID(rdata, sfp[4].o);
-	int roffset = Int_to(int, sfp[5]);
-	int rcount = Int_to(int, sfp[6]);
+	PTR(sdata, sfp[1].o);
+	int scount = Int_to(int, sfp[2]);
+	PTR(rdata, sfp[3].o);
+	int rcount = Int_to(int, sfp[4]);
 	int ret = 0;
 	if (scount > 0) {
-		knh_MPIData_checkCount(sdata, soffset, &scount);
 		int inc, rrcount = scount * MPIC_SIZE(comm);
-		knh_MPIData_expand(ctx, rdata, roffset, &rrcount, &inc);
-		knh_MPIData_incSize(rdata, inc);
-		MPI_Alltoall(MPID_ADDR(sdata, soffset), scount, MPID_TYPE(sdata), MPID_ADDR(rdata, roffset), rcount, MPID_TYPE(rdata), MPIC_COMM(comm));
+		knh_MPI_expandData(ctx, sfp, rdata, rrcount, &inc);
+		knh_MPI_plusDataSize(rdata, inc);
+		MPI_Alltoall(PTR_ADDR(sdata), scount, PTR_TYPE(sdata), PTR_ADDR(rdata), rcount, PTR_TYPE(rdata), MPIC_COMM(comm));
 		ret = 1;
 	} else {
 		size_t size = MPIC_SIZE(comm);
@@ -194,8 +177,7 @@
 		int sdispls[size];
 		int rcounts[size];
 		int rdispls[size];
-		scount = MPID_SIZE(sdata) - soffset;
-		knh_MPIData_checkCount(sdata, soffset, &scount);
+		scount = PTR_SIZE(sdata);
 		int quot = scount / size;
 		int mod = scount % size;
 		int r, rsum = 0;
@@ -212,67 +194,62 @@
 			rsum += wc;
 		}
 		int inc = 0;
-		knh_MPIData_expand(ctx, rdata, roffset, &rsum, &inc);
-		knh_MPIData_incSize(rdata, inc);
-		MPI_Alltoallv(MPID_ADDR(sdata, soffset), scounts, sdispls, MPID_TYPE(sdata), MPID_ADDR(rdata, roffset), rcounts, rdispls, MPID_TYPE(rdata), MPIC_COMM(comm));
+		knh_MPI_expandData(ctx, sfp, rdata, rsum, &inc);
+		knh_MPI_plusDataSize(rdata, inc);
+		MPI_Alltoallv(PTR_ADDR(sdata), scounts, sdispls, PTR_TYPE(sdata), PTR_ADDR(rdata), rcounts, rdispls, PTR_TYPE(rdata), MPIC_COMM(comm));
 		ret = 1;
 	}
 	RETURNb_(ret);
 }
 
 /* ------------------------------------------------------------------------ */
-//## method Int MPIComm.reduce(MPIData sdata, int soffset, MPIData rdata, int roffset, int count, MPIOp op, int root_rank);
+//## method Int MPIComm.reduce(Pointer sdata, Pointer rdata, int count, MPIOp op, int root_rank);
 
 KMETHOD MPIComm_reduce(CTX ctx, knh_sfp_t *sfp _RIX)
 {
 	MPIC(comm, sfp[0].o);
-	MPID(sdata, sfp[1].o);
-	int soffset = Int_to(int, sfp[2]);
-	MPID(rdata, sfp[3].o);
-	int roffset = Int_to(int, sfp[4]);
-	int rcount = Int_to(int, sfp[5]);
-	MPIO(op, sfp[6].o);
-	int root_rank = Int_to(int, sfp[7]);
+	PTR(sdata, sfp[1].o);
+	PTR(rdata, sfp[2].o);
+	int rcount = Int_to(int, sfp[3]);
+	MPIO(op, sfp[4].o);
+	int root_rank = Int_to(int, sfp[5]);
 	int ret = 0;
 	if (rcount == 0) {
-		int size = MPID_SIZE(sdata) - soffset;
-		knh_MPIData_checkCount(sdata, soffset, &size);
+		int size = PTR_SIZE(sdata);
 		MPI_Allreduce(&size, &rcount, 1, MPI_INT, MPI_MIN, MPIC_COMM(comm)); /* get mininum data cont */
 	}
 	if (MPIC_RANK(comm) == root_rank) {
 		int inc = 0;
-		knh_MPIData_expand(ctx, rdata, roffset, &rcount, &inc);
-		knh_MPIData_incSize(rdata, inc);
-		MPI_Reduce(MPID_ADDR(sdata, soffset), MPID_ADDR(rdata, roffset), rcount, MPID_TYPE(rdata), MPIO_OP(op), root_rank, MPIC_COMM(comm));
+		knh_MPI_expandData(ctx, sfp, rdata, rcount, &inc);
+		knh_MPI_plusDataSize(rdata, inc);
+		MPI_Reduce(PTR_ADDR(sdata), PTR_ADDR(rdata), rcount, PTR_TYPE(rdata), MPIO_OP(op), root_rank, MPIC_COMM(comm));
 		ret = 1;
 	} else {
-		MPI_Reduce(MPID_ADDR(sdata, soffset), NULL, rcount, MPID_TYPE(sdata), MPIO_OP(op), root_rank, MPIC_COMM(comm));
+		MPI_Reduce(PTR_ADDR(sdata), NULL, rcount, PTR_TYPE(sdata), MPIO_OP(op), root_rank, MPIC_COMM(comm));
 		ret = 1;
 	}
 	RETURNb_(ret);
 }
 
 /* ------------------------------------------------------------------------ */
-//## method Int MPIComm.allReduce(MPIData sdata, int soffset, MPIData rdata, int roffset, int rcount, MPIOp op);
+//## method Int MPIComm.allReduce(Pointer sdata, Pointer rdata, int rcount, MPIOp op);
 
 KMETHOD MPIComm_allReduce(CTX ctx, knh_sfp_t *sfp _RIX)
 {
 	MPIC(comm, sfp[0].o);
-	MPID(sdata, sfp[1].o);
-	int soffset = Int_to(int, sfp[2]);
-	MPID(rdata, sfp[3].o);
-	int roffset = Int_to(int, sfp[4]);
-	int rcount = Int_to(int, sfp[5]);
-	MPIO(op, sfp[6].o);
+	PTR(sdata, sfp[1].o);
+	PTR(rdata, sfp[2].o);
+	int rcount = Int_to(int, sfp[3]);
+	MPIO(op, sfp[4].o);
 	int ret = 0;
 	if (rcount == 0) {
-		int size = MPID_SIZE(sdata) - soffset;
+		int size = PTR_SIZE(sdata);
 		MPI_Allreduce(&size, &rcount, 1, MPI_INT, MPI_MIN, MPIC_COMM(comm)); /* get mininum data cont */
 	}
 	int inc;
-	knh_MPIData_expand(ctx, rdata, roffset, &rcount, &inc);
-	knh_MPIData_incSize(rdata, inc);
-	MPI_Allreduce(MPID_ADDR(sdata, soffset), MPID_ADDR(rdata, roffset), rcount, MPID_TYPE(rdata), MPIO_OP(op), MPIC_COMM(comm));
+	knh_MPI_expandData(ctx, sfp, rdata, rcount, &inc);
+	knh_MPI_plusDataSize(rdata, inc);
+	MPI_Allreduce(PTR_ADDR(sdata), PTR_ADDR(rdata), rcount, PTR_TYPE(rdata), MPIO_OP(op), MPIC_COMM(comm));
 	ret = 1;
 	RETURNb_(ret);
 }
Index: src/data.c
===================================================================
--- src/data.c	(revision 676)
+++ src/data.c	(working copy)
@@ -1,232 +1,113 @@
 #include "../konoha_mpi.h"
 
-/* ======================================================================== */
-/* TYPEMAP */
+/* ------------------------------------------------------------------------ */
 
-
-TYPEMAP Int_MPIData(CTX ctx, knh_sfp_t *sfp _RIX)
+//## method Class Pointer.getContentClass();
+KMETHOD Pointer_getContentClass(CTX ctx, knh_sfp_t *sfp _RIX)
 {
-	knh_class_t cid = knh_getcid(ctx, B("konoha.mpi.MPIData"));
-	knh_MPIData_t *data = new_O(MPIData, cid);
-	data->i = new_Int(ctx, sfp[1].ivalue);
-	data->type = MPI_LONG;
-	MPID_INITCID(data);
-	RETURN_(data);
+	PTR(p, sfp[0].o);
+	knh_Class_t *cls = new_Type(ctx, p->gcref->h.cTBL->cid);
+	RETURN_(cls);
 }
 
-TYPEMAP int___MPIData(CTX ctx, knh_sfp_t *sfp _RIX)
-{
-	knh_class_t cid = knh_getcid(ctx, B("konoha.mpi.MPIData"));
-	knh_MPIData_t *data = new_O(MPIData, cid);
-	data->a = sfp[1].a;
-	data->type = MPI_LONG;
-	data->cid = CLASS_Array;
-	RETURN_(data);
-}
+/* ------------------------------------------------------------------------ */
 
-TYPEMAP Float_MPIData(CTX ctx, knh_sfp_t *sfp _RIX)
+MPI_Datatype knh_MPI_getDataType(knh_Pointer_t *ptr)
 {
-	knh_class_t cid = knh_getcid(ctx, B("konoha.mpi.MPIData"));
-	knh_MPIData_t *data = new_O(MPIData, cid);
-	data->f = new_Float_(ctx, CLASS_Float, sfp[1].fvalue);
-	data->type = MPI_DOUBLE;
-	MPID_INITCID(data);
-	RETURN_(data);
-}
-
-TYPEMAP float___MPIData(CTX ctx, knh_sfp_t *sfp _RIX)
-{
-	knh_class_t cid = knh_getcid(ctx, B("konoha.mpi.MPIData"));
-	knh_MPIData_t *data = new_O(MPIData, cid);
-	data->a = sfp[1].a;
-	data->type = MPI_DOUBLE;
-	data->cid = CLASS_Array;
-	RETURN_(data);
-}
-
-TYPEMAP Bytes_MPIData(CTX ctx, knh_sfp_t *sfp _RIX)
-{
-	knh_class_t cid = knh_getcid(ctx, B("konoha.mpi.MPIData"));
-	knh_MPIData_t *data = new_O(MPIData, cid);
-	data->b = sfp[1].ba;
-	data->type = MPI_CHAR;
-	MPID_INITCID(data);
-	RETURN_(data);
-}
-
-TYPEMAP String_MPIData(CTX ctx, knh_sfp_t *sfp _RIX)
-{
-	knh_class_t cid = knh_getcid(ctx, B("konoha.mpi.MPIData"));
-	knh_MPIData_t *data = new_O(MPIData, cid);
-	data->s = sfp[1].s;
-	data->type = MPI_CHAR;
-	MPID_INITCID(data);
-	RETURN_(data);
-}
-
-TYPEMAP MPIData_int__(CTX ctx, knh_sfp_t *sfp _RIX)
-{
-	MPID(data, sfp[1].o);
-	if (data->cid == CLASS_Array && data->type == MPI_LONG) {
-		RETURN_(data->a);
+	switch (PTR_CID(ptr)) {
+	case CLASS_ArrayInt:
+	case CLASS_Int:
+		return MPI_LONG;
+	case CLASS_ArrayFloat:
+	case CLASS_Float:
+		return MPI_DOUBLE;
+	case CLASS_Bytes:
+		return MPI_CHAR;
+	default:
+		// for instance
+		return MPI_BYTE;
 	}
-	RETURN_(KNH_NULVAL(O_cid(data)));
 }
 
-TYPEMAP MPIData_float__(CTX ctx, knh_sfp_t *sfp _RIX)
+int knh_MPI_getDataSize(knh_Pointer_t *ptr)
 {
-	MPID(data, sfp[1].o);
-	if (data->cid == CLASS_Array && data->type == MPI_DOUBLE) {
-		RETURN_(data->a);
+	switch (PTR_CID(ptr)) {
+	case CLASS_ArrayInt:
+	case CLASS_ArrayFloat:
+		return knh_Array_size((knh_Array_t*)PTR_REF(ptr));
+	case CLASS_Bytes:
+		return BA_size((knh_Bytes_t*)PTR_REF(ptr));
+	case CLASS_String:
+		return S_size((knh_String_t*)PTR_REF(ptr));
+	case CLASS_Int:
+	case CLASS_Float:
+		return 1;
+	default:
+		return 0;
 	}
-	RETURN_(KNH_NULVAL(O_cid(data)));
 }
 
-TYPEMAP MPIData_Bytes(CTX ctx, knh_sfp_t *sfp _RIX)
+int knh_MPI_getDataCapacity(knh_Pointer_t *ptr)
 {
-	MPID(data, sfp[1].o);
-	if (data->cid == CLASS_Bytes && data->type == MPI_CHAR) {
-		RETURN_(data->b);
-	}
-	RETURN_(KNH_NULVAL(O_cid(data)));
-}
-
-/* ------------------------------------------------------------------------ */
-
-//## method Class MPIData.getContentClass();
-KMETHOD MPIData_getContentClass(CTX ctx, knh_sfp_t *sfp _RIX)
-{
-	MPID(data, sfp[0].o);
-	knh_Class_t *cls = new_Type(ctx, data->o->h.cTBL->cid);
-	RETURN_(cls);
-}
-
-/* ------------------------------------------------------------------------ */
-
-void* knh_MPIData_getAddr(knh_MPIData_t *data, int offset)
-{
-	if (offset < 0) return NULL;
-	switch (MPID_CID(data)) {
-	case CLASS_Int:
-		return &O_data(data->i);
-	case CLASS_Float:
-		return &O_data(data->f);
-	case CLASS_Array:
-		if (data->type ==  MPI_LONG)
-			return data->a->ilist + offset;
-		else if (data->type == MPI_DOUBLE)
-			return data->a->flist + offset;
-		break;
+	switch (PTR_CID(ptr)) {
+	case CLASS_ArrayInt:
+	case CLASS_ArrayFloat:
+		return ((knh_Array_t*)PTR_REF(ptr))->dim->capacity;
 	case CLASS_Bytes:
-		return data->b->bu.buf + offset;
-	case CLASS_String:
-		return data->s->str.buf + offset;
+		return ((knh_Bytes_t*)PTR_REF(ptr))->dim->capacity;
+	default:
+		return 0;
 	}
-	return NULL;
 }
 
-void knh_MPIData_expand(CTX ctx, knh_MPIData_t *data, int offset, int *count, int *inc)
+void knh_MPI_expandData(CTX ctx, knh_sfp_t *sfp, knh_Pointer_t *ptr, int count, int *inc)
 {
-	/*
-	 * "aaaa"      = SIZE
-	 * "aa|        = offset
-	 *
-	 * (case 1: capacity > offset + count)
-	 * "aaaa"..... = capacity
-	 *    |====>   = count
-	 *          <= = exp (not care)
-	 * ".......>   = new_size
-	 *
-	 * (case 2: capacity < offset + count)
-	 * "aaaa"..    = capacity
-	 *    |======> = count
-	 *         ==> = exp (to be expanded)
-	 * ".........> = new_size
-	 */
-	int cur_size = MPID_SIZE(data);
-	if (count <= 0 || offset > cur_size) {
-		*count = 0;  // invalid param
-		*inc = 0;
-		return;
-	}
-	int new_size = offset + *count;
-	int capacity = knh_MPIData_getCapacity(data);
-	if (new_size <= cur_size) {
-		*inc = 0; // no need to incl
-		return;
-	}
-	if (new_size > capacity) {
-		switch (MPID_CID(data)) {
+	int cur_size = PTR_SIZE(ptr);
+	if (count > cur_size) {
+		int capacity = PTR_CAP(ptr);
+		switch (PTR_CID(ptr)) {
 		case CLASS_Bytes: {
-			int exp_size = k_grow(capacity);
-			if (exp_size < new_size) exp_size = k_goodsize(new_size);
-			knh_Bytes_expands(ctx, data->b, exp_size);
+			if (count > capacity) {
+				knh_Bytes_t *b = (knh_Bytes_t*)PTR_REF(ptr);
+				int exp_size = k_grow(capacity);
+				if (exp_size < count) exp_size = k_goodsize(count);
+				knh_Bytes_expands(ctx, b, exp_size);
+			}
+			*inc = count - cur_size;
 			break;
 		}
-		case CLASS_Array: {
-			knh_Array_grow(ctx, data->a, new_size, 0);
+		case CLASS_ArrayInt:
+		case CLASS_ArrayFloat: {
+			if (count > capacity) {
+				knh_Array_t *a = (knh_Array_t*)PTR_REF(ptr);
+				knh_Array_grow(ctx, a, count, 0);
+			}
+			*inc = count - cur_size;
 			break;
 		}
 		default: {
-			*count = 0;
-			*inc = 0;
-			return;
+			knh_ldata_t ldata[] = {LOG_i("cid", PTR_CID(ptr)), LOG_END};
+			KNH_NTHROW(ctx, sfp, "MPI!!", "cannot expand data", K_PERROR, ldata);
+			break;
 		}
 		}
 	}
-	*inc = *count;
 }
 
-int knh_MPIData_getSize(knh_MPIData_t *data)
+int knh_MPI_plusDataSize(knh_Pointer_t *ptr, int inc)
 {
-	switch (MPID_CID(data)) {
-	case CLASS_Array:
-		return knh_Array_size(data->a);
-	case CLASS_Bytes:
-		return BA_size(data->b);
-	case CLASS_String:
-		return S_size(data->s);
-	case CLASS_Int:
-	case CLASS_Float:
-		return 1;
+	if (inc <= 0) return 0;
+	switch (PTR_CID(ptr)) {
+	case CLASS_ArrayInt:
+	case CLASS_ArrayFloat: {
+		knh_Array_size((knh_Array_t*)PTR_REF(ptr)) += inc;
+		return inc;
 	}
-	return 0;
-}
-
-int knh_MPIData_incSize(knh_MPIData_t *data, int count)
-{
-	if (count <= 0) return 0;
-	switch (MPID_CID(data)) {
-	case CLASS_Array: {
-		knh_Array_size(data->a) += count;
-		return count;
-	}
 	case CLASS_Bytes: {
-		BA_size(data->b) += count;
-		return count;
+		BA_size((knh_Bytes_t*)PTR_REF(ptr)) += inc;
+		return inc;
 	}
+	default:
+		return 0;
 	}
-	return 0;
 }
-
-int knh_MPIData_getCapacity(knh_MPIData_t *data)
-{
-	switch (MPID_CID(data)) {
-	case CLASS_Array:
-		return data->a->dim->capacity;
-	case CLASS_Bytes:
-		return data->b->dim->capacity;
-	}
-	return -1;
-}
-
-void  knh_MPIData_checkCount(knh_MPIData_t *data, int offset, int *count)
-{
-	int scount = MPID_SIZE(data) - offset;
-	if (scount >= 0) {
-		if (scount < *count) *count = scount;
-		if (*count < 0) *count = 0;
-	} else {
-		*count = 0;
-	}
-}
Index: src/pt2pt.c
===================================================================
--- src/pt2pt.c	(revision 676)
+++ src/pt2pt.c	(working copy)
@@ -1,162 +1,117 @@
 #include "../konoha_mpi.h"
 
 /* ------------------------------------------------------------------------ */
-//## method int MPIComm.send(MPIData sdata, int offset, int count, int dest, int tag);
+//## method boolean MPIComm.send(Pointer sdata, int count, int dest, int tag);
 
 KMETHOD MPIComm_send(CTX ctx, knh_sfp_t *sfp _RIX)
 {
 	MPIC(comm, sfp[0].o);
-	MPID(sdata, sfp[1].o);
-	int offset = Int_to(int, sfp[2]);
-	int count = Int_to(int, sfp[3]);
-	int dest_rank = Int_to(int, sfp[4]);
-	int tag = Int_to(int, sfp[5]);
-	/*
-	 * "............."  = SIZE   (must be > 0)
-	 * "....|           = offset (must be < SIZE)
-	 *      |===>       = count  (must be <= scount)
-	 *      |===>...."  = scount (must be > 0) (if scount < count, count = scount)
-	 */
-	knh_MPIData_checkCount(sdata, offset, &count);
-	RETURNi_(MPI_Send(MPID_ADDR(sdata, offset), count, MPID_TYPE(sdata), dest_rank, tag, MPIC_COMM(comm)));
+	PTR(sdata, sfp[1].o);
+	int count = Int_to(int, sfp[2]);
+	int dest_rank = Int_to(int, sfp[3]);
+	int tag = Int_to(int, sfp[4]);
+	int ret = 0;
+	MPI_Send(PTR_ADDR(sdata), count, PTR_TYPE(sdata), dest_rank, tag, MPIC_COMM(comm));
+	ret = 1;
+	RETURNb_(ret);
 }
 
 /* ------------------------------------------------------------------------ */
-//## method int MPIComm.recv(MPIData rdata, int offset, int count, int src_rank, int tag);
+//## method boolean MPIComm.recv(Pointer rdata, int count, int src_rank, int tag);
 
 KMETHOD MPIComm_recv(CTX ctx, knh_sfp_t *sfp _RIX)
 {
 	MPIC(comm, sfp[0].o);
-	MPID(rdata, sfp[1].o);
-	int offset = Int_to(int, sfp[2]);
-	int count = Int_to(int, sfp[3]);
-	int src_rank = Int_to(int, sfp[4]);
-	int tag = Int_to(int, sfp[5]);
-	/*
-	 * "aaaa"            = SIZE
-	 *
-	 * (case 1: capacity < offset + count)
-	 * "aaaa"...         = capacity
-	 * "aa|              = offset   (must be < SIZE)
-	 *    |========>     = count    (must be < rcount) (if count > rcount, count = rcount)
-	 *    |========>---> = rcount
-	 *          ===>     = incl     (need to expand)
-	 * "...........>     = newsize  (= capacity + incl > SIZE)
-	 *
-	 * (case 2: capacity > offset + count)
-	 * "aaaa".........   = capacity
-	 * "aa|              = offset   (must be < SIZE)
-	 *    |====>         = count    (must be < rcount) (if count > rcount, count = rcount)
-	 *    |====>--->     = rcount
-	 *              <=   = incl     (need to expand)
-	 * "...........>     = newsize  (= capacity + incl > SIZE)
-	 */
+	PTR(rdata, sfp[1].o);
+	int count = Int_to(int, sfp[2]);
+	int src_rank = Int_to(int, sfp[3]);
+	int tag = Int_to(int, sfp[4]);
 	MPI_Status stat;
 	if (MPI_Probe(src_rank, tag, MPIC_COMM(comm), &stat) == MPI_SUCCESS) {
 		int rcount = 0;
-		MPI_Get_count(&stat, MPID_TYPE(rdata), &rcount);
-		if (count > rcount) count = rcount;
-	} else {
-		count = 0;
+		MPI_Get_count(&stat, PTR_TYPE(rdata), &rcount);
 	}
-	int inc = 0;
-	knh_MPIData_expand(ctx, rdata, offset, &count, &inc);
-	knh_MPIData_incSize(rdata, inc);
-	RETURNi_(MPI_Recv(MPID_ADDR(rdata, offset), count, MPID_TYPE(rdata), src_rank, tag, MPIC_COMM(comm), &stat));
+	int ret = 0, inc = 0;
+	knh_MPI_expandData(ctx, sfp, rdata, count, &inc);
+	knh_MPI_plusDataSize(rdata, inc);
+	assert(PTR_ADDR(rdata) != NULL);
+	int ierr = MPI_Recv(PTR_ADDR(rdata), count, PTR_TYPE(rdata), src_rank, tag, MPIC_COMM(comm), &stat);
+	if (ierr != MPI_SUCCESS) {
+		int resultlen;
+		char err_buffer[MPI_MAX_ERROR_STRING];
+		MPI_Error_string(ierr, err_buffer, &resultlen);
+		fprintf(stderr, "%s\n", err_buffer);
+	}
+	ret = 1;
+	RETURNb_(ret);
 }
 
 /* ------------------------------------------------------------------------ */
-//## method int MPIComm.sendrecv(MPIData sdata, int soffset, int scount, int dest_rank, int stag,
-//##                             MPIData rdata, int roffset, int rcount, int src_rank,  int rtag);
+//## method boolean MPIComm.sendrecv(Pointer sdata, int scount, int dest_rank, int stag,
+//##                                 Pointer rdata, int rcount, int src_rank,  int rtag);
 
 KMETHOD MPIComm_sendrecv(CTX ctx, knh_sfp_t *sfp _RIX)
 {
 	MPIC(comm, sfp[0].o);
-	MPID(sdata, sfp[1].o);
-	int soffset = Int_to(int, sfp[2]);
-	int scount = Int_to(int, sfp[3]);
-	int dest_rank = Int_to(int, sfp[4]);
-	int stag = Int_to(int, sfp[5]);
-	MPID(rdata, sfp[6].o);
-	int roffset = Int_to(int, sfp[7]);
-	int rcount = Int_to(int, sfp[8]);
-	int src_rank = Int_to(int, sfp[9]);
-	int rtag = Int_to(int, sfp[10]);
-	/*
-	 * "........"   = SIZE(sdata) (must be > 0)
-	 * "..|         = soffset     (must be < SIZE(sdata))
-	 *    |==>      = scount      (must be < sscount)
-	 *    |==>.."   = sscount     (must be > 0) (if sscount < scount, scount = sscount)
-	 *
-	 * "aaaa"           = SIZE(rdata)
-	 * "aaaa"...        = capacity
-	 * "aa|             = roffset     (must be < SIZE(rdata))
-	 *    |========>    = rcount      (must be < rrcount) (if rcount > rrcount, rcount = rrcount)
-	 *    |========>--> = rrcount
-	 *          ===>    = incl        (need to expand)
-	 * "...........>    = newsize     (= capacity + incl)
-	 */
-	knh_MPIData_checkCount(sdata, soffset, &scount);
+	PTR(sdata, sfp[1].o);
+	int scount = Int_to(int, sfp[2]);
+	int dest_rank = Int_to(int, sfp[3]);
+	int stag = Int_to(int, sfp[4]);
+	PTR(rdata, sfp[5].o);
+	int rcount = Int_to(int, sfp[6]);
+	int src_rank = Int_to(int, sfp[7]);
+	int rtag = Int_to(int, sfp[8]);
 	MPI_Status stat;
-	{
-		int rrcount = 0;
-		MPI_Sendrecv(&scount, 1, MPI_INT, dest_rank, stag, &rrcount, 1, MPI_INT, src_rank, rtag, MPIC_COMM(comm), &stat);
-		if (rcount > rrcount) rcount = rrcount;
+	if (rcount == 0) {
+		MPI_Sendrecv(&scount, 1, MPI_INT, dest_rank, stag, &rcount, 1, MPI_INT, src_rank, rtag, MPIC_COMM(comm), &stat);
 	}
-	int inc = 0;
-	knh_MPIData_expand(ctx, rdata, roffset, &rcount, &inc);
-	knh_MPIData_incSize(rdata, inc);
-	RETURNi_(MPI_Sendrecv(MPID_ADDR(sdata, soffset), scount, MPID_TYPE(sdata), dest_rank, stag,
-						  MPID_ADDR(rdata, roffset), rcount, MPID_TYPE(rdata), src_rank, rtag, MPIC_COMM(comm), &stat));
+	int ret = 0, inc = 0;
+	knh_MPI_expandData(ctx, sfp, rdata, rcount, &inc);
+	knh_MPI_plusDataSize(rdata, inc);
+	MPI_Sendrecv(PTR_ADDR(sdata), scount, PTR_TYPE(sdata), dest_rank, stag,
+				 PTR_ADDR(rdata), rcount, PTR_TYPE(rdata), src_rank, rtag, MPIC_COMM(comm), &stat);
+	ret = 1;
+	RETURNb_(ret);
 }
 
 /* ------------------------------------------------------------------------ */
-//## method MPIRequest MPIComm.iSend(MPIData sdata, int offset, int count, int dest_rank, int tag, MPIRequest _);
+//## method MPIRequest MPIComm.iSend(Pointer sdata, int count, int dest_rank, int tag, MPIRequest _);
 
 KMETHOD MPIComm_iSend(CTX ctx, knh_sfp_t *sfp _RIX)
 {
 	MPIC(comm, sfp[0].o);
-	MPID(sdata, sfp[1].o);
-	int offset = Int_to(int, sfp[2]);
-	int count = Int_to(int, sfp[3]);
-	int dest_rank = Int_to(int, sfp[4]);
-	int tag = Int_to(int, sfp[5]);
-	knh_MPIRequest_t *req = (knh_MPIRequest_t*)sfp[6].o;
-
-	Request_new(ctx, req);
-	MPIR_DATA(req) = sdata;
-	knh_MPIData_checkCount(sdata, offset, &count);
-	MPI_Isend(MPID_ADDR(sdata, offset), count, MPID_TYPE(sdata), dest_rank, tag, MPIC_COMM(comm), MPIR_REQ(req));
+	PTR(sdata, sfp[1].o);
+	int count = Int_to(int, sfp[2]);
+	int dest_rank = Int_to(int, sfp[3]);
+	int tag = Int_to(int, sfp[4]);
+	MPIR(req, new_O(MPIRequest, O_cid(sfp[5].o)));
+	MPIR_PTR(req) = sdata;
+	MPI_Isend(PTR_ADDR(sdata), count, PTR_TYPE(sdata), dest_rank, tag, MPIC_COMM(comm), MPIR_REQ(req));
 	RETURN_(req);
 }
 
 /* ------------------------------------------------------------------------ */
-//## method MPIRequest MPIComm.iRecv(MPIData rdata, int offset, int count, int src_rank, int tag, MPIRequest _);
+//## method MPIRequest MPIComm.iRecv(Pointer rdata, int count, int src_rank, int tag, MPIRequest _);
 
 KMETHOD MPIComm_iRecv(CTX ctx, knh_sfp_t *sfp _RIX)
 {
 	MPIC(comm, sfp[0].o);
-	MPID(rdata, sfp[1].o);
-	int offset = Int_to(int, sfp[2]);
-	int count = Int_to(int, sfp[3]);
-	int src_rank = Int_to(int, sfp[4]);
-	int tag = Int_to(int, sfp[5]);
-	knh_MPIRequest_t *req = (knh_MPIRequest_t*)sfp[6].o;
-
-	Request_new(ctx, req);
-	MPIR_DATA(req) = rdata;
+	PTR(rdata, sfp[1].o);
+	int count = Int_to(int, sfp[2]);
+	int src_rank = Int_to(int, sfp[3]);
+	int tag = Int_to(int, sfp[4]);
+	MPIR(req, new_O(MPIRequest, O_cid(sfp[5].o)));
+	MPIR_PTR(req) = rdata;
 	int flag = 0;
 	MPI_Status stat;
 	MPI_Iprobe(src_rank, tag, MPIC_COMM(comm), &flag, &stat);
-	if (flag) {
-		int rcount = 0;
-		MPI_Get_count(&stat, MPID_TYPE(rdata), &rcount);
-		if (count > rcount) count = rcount;
+	if (flag && count == 0) {
+		MPI_Get_count(&stat, PTR_TYPE(rdata), &count);
 	}
 	int inc = 0;
-	knh_MPIData_expand(ctx, rdata, offset, &count, &inc);
+	knh_MPI_expandData(ctx, sfp, rdata, count, &inc);
 	MPIR_INC(req) = inc;
-	MPI_Irecv(MPID_ADDR(rdata, offset), count, MPID_TYPE(rdata), src_rank, tag, MPIC_COMM(comm), MPIR_REQ(req));
+	MPI_Irecv(PTR_ADDR(rdata), count, PTR_TYPE(rdata), src_rank, tag, MPIC_COMM(comm), MPIR_REQ(req));
 	RETURN_(req);
 }
 
@@ -168,7 +123,7 @@
 
 KMETHOD MPIRequest_test(CTX ctx, knh_sfp_t *sfp _RIX)
 {
-	knh_MPIRequest_t *req = (knh_MPIRequest_t*)sfp[0].o;
+	MPIR(req, sfp[0].o);
 	MPI_Status stat;
 	int flag, ret = 0;
 	MPI_Test(MPIR_REQ(req), &flag, &stat);
@@ -176,7 +131,7 @@
 		int count;
 		MPI_Get_count(&stat, MPIR_TYPE(req), &count);
 		if (MPIR_INC(req) > 0) {
-			knh_MPIData_incSize(MPIR_DATA(req), count);
+			knh_MPI_plusDataSize(MPIR_PTR(req), count);
 			MPIR_INC(req) = 0;
 		}
 		ret = 1;
@@ -189,14 +144,14 @@
 
 KMETHOD MPIRequest_wait(CTX ctx, knh_sfp_t *sfp _RIX)
 {
-	knh_MPIRequest_t *req = (knh_MPIRequest_t*)sfp[0].o;
+	MPIR(req, sfp[0].o);
 	MPI_Status stat;
 	int ret = 0;
 	if (MPI_Wait(MPIR_REQ(req), &stat) == MPI_SUCCESS) {
 		int count;
 		MPI_Get_count(&stat, MPIR_TYPE(req), &count);
 		if (MPIR_INC(req) > 0) {
-			knh_MPIData_incSize(MPIR_DATA(req), count);
+			knh_MPI_plusDataSize(MPIR_PTR(req), count);
 			MPIR_INC(req) = 0;
 		}
 		ret = 1;
@@ -209,6 +164,6 @@
 
 KMETHOD MPIRequest_cancel(CTX ctx, knh_sfp_t *sfp _RIX)
 {
-	knh_MPIRequest_t *req = (knh_MPIRequest_t*)sfp[0].o;
+	MPIR(req, sfp[0].o);
 	RETURNb_(MPI_Cancel(MPIR_REQ(req)) == MPI_SUCCESS ? 1 : 0);
 }
