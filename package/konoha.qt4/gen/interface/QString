input_urn
/home/onoda/Documents/qt-everywhere-opensource-src-4.7.4/doc/html/qstring.html

output_urn
QString

inherits

public_types
 class Null
 typedef ConstIterator
 typedef Iterator
 enum NormalizationForm { NormalizationForm_D, NormalizationForm_C, NormalizationForm_KD, NormalizationForm_KC }
 enum SectionFlag { SectionDefault, SectionSkipEmpty, SectionIncludeLeadingSep, SectionIncludeTrailingSep, SectionCaseInsensitiveSeps }
 flags SectionFlags
 enum SplitBehavior { KeepEmptyParts, SkipEmptyParts }
 typedef const_iterator
 typedef iterator

properties

public_functions
QString ()
QString ( const QChar * unicode, int size )
QString ( const QChar * unicode )
QString ( QChar ch )
QString ( int size, QChar ch )
QString ( const QLatin1String & str )
QString ( const QString & other )
QString ( const char * str )
QString ( const QByteArray & ba )
~QString ()
 QString & append ( const QString & str )
 QString & append ( const QStringRef & reference )
 QString & append ( const QLatin1String & str )
 QString & append ( const QByteArray & ba )
 QString & append ( const char * str )
 QString & append ( QChar ch )
 QString arg ( const QString & a, int fieldWidth = 0, const QChar & fillChar = QLatin1Char( ' ' ) ) const
 QString arg ( const QString & a1, const QString & a2 ) const
 QString arg ( const QString & a1, const QString & a2, const QString & a3 ) const
 QString arg ( const QString & a1, const QString & a2, const QString & a3, const QString & a4 ) const
 QString arg ( const QString & a1, const QString & a2, const QString & a3, const QString & a4, const QString & a5 ) const
 QString arg ( const QString & a1, const QString & a2, const QString & a3, const QString & a4, const QString & a5, const QString & a6 ) const
 QString arg ( const QString & a1, const QString & a2, const QString & a3, const QString & a4, const QString & a5, const QString & a6, const QString & a7 ) const
 QString arg ( const QString & a1, const QString & a2, const QString & a3, const QString & a4, const QString & a5, const QString & a6, const QString & a7, const QString & a8 ) const
 QString arg ( const QString & a1, const QString & a2, const QString & a3, const QString & a4, const QString & a5, const QString & a6, const QString & a7, const QString & a8, const QString & a9 ) const
 QString arg ( int a, int fieldWidth = 0, int base = 10, const QChar & fillChar = QLatin1Char( ' ' ) ) const
 QString arg ( uint a, int fieldWidth = 0, int base = 10, const QChar & fillChar = QLatin1Char( ' ' ) ) const
 QString arg ( long a, int fieldWidth = 0, int base = 10, const QChar & fillChar = QLatin1Char( ' ' ) ) const
 QString arg ( ulong a, int fieldWidth = 0, int base = 10, const QChar & fillChar = QLatin1Char( ' ' ) ) const
 QString arg ( qlonglong a, int fieldWidth = 0, int base = 10, const QChar & fillChar = QLatin1Char( ' ' ) ) const
 QString arg ( qulonglong a, int fieldWidth = 0, int base = 10, const QChar & fillChar = QLatin1Char( ' ' ) ) const
 QString arg ( short a, int fieldWidth = 0, int base = 10, const QChar & fillChar = QLatin1Char( ' ' ) ) const
 QString arg ( ushort a, int fieldWidth = 0, int base = 10, const QChar & fillChar = QLatin1Char( ' ' ) ) const
 QString arg ( QChar a, int fieldWidth = 0, const QChar & fillChar = QLatin1Char( ' ' ) ) const
 QString arg ( char a, int fieldWidth = 0, const QChar & fillChar = QLatin1Char( ' ' ) ) const
 QString arg ( double a, int fieldWidth = 0, char format = 'g', int precision = -1, const QChar & fillChar = QLatin1Char( ' ' ) ) const
 const QChar at ( int position ) const
 iterator begin ()
 const_iterator begin () const
 int capacity () const
 void chop ( int n )
 void clear ()
 int compare ( const QString & other ) const
 int compare ( const QString & other, Qt::CaseSensitivity cs ) const
 int compare ( const QLatin1String & other, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 int compare ( const QStringRef & ref, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 const_iterator constBegin () const
 const QChar * constData () const
 const_iterator constEnd () const
 bool contains ( const QString & str, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 bool contains ( QChar ch, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 bool contains ( const QRegExp & rx ) const
 bool contains ( QRegExp & rx ) const
 int count ( const QString & str, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 int count ( QChar ch, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 int count ( const QRegExp & rx ) const
 int count () const
 QChar * data ()
 const QChar * data () const
 iterator end ()
 const_iterator end () const
 bool endsWith ( const QString & s, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 bool endsWith ( const QLatin1String & s, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 bool endsWith ( const QChar & c, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 QString & fill ( QChar ch, int size = -1 )
 int indexOf ( const QString & str, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 int indexOf ( const QLatin1String & str, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 int indexOf ( QChar ch, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 int indexOf ( const QRegExp & rx, int from = 0 ) const
 int indexOf ( QRegExp & rx, int from = 0 ) const
 QString & insert ( int position, const QString & str )
 QString & insert ( int position, const QLatin1String & str )
 QString & insert ( int position, const QChar * unicode, int size )
 QString & insert ( int position, QChar ch )
 bool isEmpty () const
 bool isNull () const
 bool isRightToLeft () const
 int lastIndexOf ( const QString & str, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 int lastIndexOf ( const QLatin1String & str, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 int lastIndexOf ( QChar ch, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 int lastIndexOf ( const QRegExp & rx, int from = -1 ) const
 int lastIndexOf ( QRegExp & rx, int from = -1 ) const
 QString left ( int n ) const
 QString leftJustified ( int width, QChar fill = QLatin1Char( ' ' ), bool truncate = false ) const
 QStringRef leftRef ( int n ) const
 int length () const
 int localeAwareCompare ( const QStringRef & other ) const
 int localeAwareCompare ( const QString & other ) const
 QString mid ( int position, int n = -1 ) const
 QStringRef midRef ( int position, int n = -1 ) const
 QString normalized ( NormalizationForm mode ) const
 QString normalized ( NormalizationForm mode, QChar::UnicodeVersion version ) const
 QString & prepend ( const QString & str )
 QString & prepend ( const QLatin1String & str )
 QString & prepend ( const QByteArray & ba )
 QString & prepend ( const char * str )
 QString & prepend ( QChar ch )
 void push_back ( const QString & other )
 void push_back ( QChar ch )
 void push_front ( const QString & other )
 void push_front ( QChar ch )
 QString & remove ( int position, int n )
 QString & remove ( QChar ch, Qt::CaseSensitivity cs = Qt::CaseSensitive )
 QString & remove ( const QString & str, Qt::CaseSensitivity cs = Qt::CaseSensitive )
 QString & remove ( const QRegExp & rx )
 QString repeated ( int times ) const
 QString & replace ( int position, int n, const QString & after )
 QString & replace ( int position, int n, const QChar * unicode, int size )
 QString & replace ( int position, int n, QChar after )
 QString & replace ( const QString & before, const QString & after, Qt::CaseSensitivity cs = Qt::CaseSensitive )
 QString & replace ( const QChar * before, int blen, const QChar * after, int alen, Qt::CaseSensitivity cs = Qt::CaseSensitive )
 QString & replace ( QChar ch, const QString & after, Qt::CaseSensitivity cs = Qt::CaseSensitive )
 QString & replace ( QChar before, QChar after, Qt::CaseSensitivity cs = Qt::CaseSensitive )
 QString & replace ( const QLatin1String & before, const QLatin1String & after, Qt::CaseSensitivity cs = Qt::CaseSensitive )
 QString & replace ( const QLatin1String & before, const QString & after, Qt::CaseSensitivity cs = Qt::CaseSensitive )
 QString & replace ( const QString & before, const QLatin1String & after, Qt::CaseSensitivity cs = Qt::CaseSensitive )
 QString & replace ( QChar c, const QLatin1String & after, Qt::CaseSensitivity cs = Qt::CaseSensitive )
 QString & replace ( const QRegExp & rx, const QString & after )
 void reserve ( int size )
 void resize ( int size )
 QString right ( int n ) const
 QString rightJustified ( int width, QChar fill = QLatin1Char( ' ' ), bool truncate = false ) const
 QStringRef rightRef ( int n ) const
 QString section ( QChar sep, int start, int end = -1, SectionFlags flags = SectionDefault ) const
 QString section ( const QString & sep, int start, int end = -1, SectionFlags flags = SectionDefault ) const
 QString section ( const QRegExp & reg, int start, int end = -1, SectionFlags flags = SectionDefault ) const
 QString & setNum ( int n, int base = 10 )
 QString & setNum ( uint n, int base = 10 )
 QString & setNum ( long n, int base = 10 )
 QString & setNum ( ulong n, int base = 10 )
 QString & setNum ( qlonglong n, int base = 10 )
 QString & setNum ( qulonglong n, int base = 10 )
 QString & setNum ( short n, int base = 10 )
 QString & setNum ( ushort n, int base = 10 )
 QString & setNum ( double n, char format = 'g', int precision = 6 )
 QString & setNum ( float n, char format = 'g', int precision = 6 )
 QString & setRawData ( const QChar * unicode, int size )
 QString & setUnicode ( const QChar * unicode, int size )
 QString & setUtf16 ( const ushort * unicode, int size )
 QString simplified () const
 int size () const
 QStringList split ( const QString & sep, SplitBehavior behavior = KeepEmptyParts, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 QStringList split ( const QChar & sep, SplitBehavior behavior = KeepEmptyParts, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 QStringList split ( const QRegExp & rx, SplitBehavior behavior = KeepEmptyParts ) const
 QString & sprintf ( const char * cformat, ... )
 void squeeze ()
 bool startsWith ( const QString & s, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 bool startsWith ( const QLatin1String & s, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 bool startsWith ( const QChar & c, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
 QByteArray toAscii () const
 QString toCaseFolded () const
 double toDouble ( bool * ok = 0 ) const
 float toFloat ( bool * ok = 0 ) const
 int toInt ( bool * ok = 0, int base = 10 ) const
 QByteArray toLatin1 () const
 QByteArray toLocal8Bit () const
 long toLong ( bool * ok = 0, int base = 10 ) const
 qlonglong toLongLong ( bool * ok = 0, int base = 10 ) const
 QString toLower () const
 short toShort ( bool * ok = 0, int base = 10 ) const
 std::string toStdString () const
 std::wstring toStdWString () const
 uint toUInt ( bool * ok = 0, int base = 10 ) const
 ulong toULong ( bool * ok = 0, int base = 10 ) const
 qulonglong toULongLong ( bool * ok = 0, int base = 10 ) const
 ushort toUShort ( bool * ok = 0, int base = 10 ) const
 QVector<uint> toUcs4 () const
 QString toUpper () const
 QByteArray toUtf8 () const
 int toWCharArray ( wchar_t * array ) const
 QString trimmed () const
 void truncate ( int position )
 const QChar * unicode () const
 const ushort * utf16 () const
 QString & vsprintf ( const char * cformat, va_list ap )
 bool operator!= ( const QString & other ) const
 bool operator!= ( const QLatin1String & other ) const
 bool operator!= ( const QByteArray & other ) const
 bool operator!= ( const char * other ) const
 QString & operator+= ( const QString & other )
 QString & operator+= ( const QLatin1String & str )
 QString & operator+= ( const QByteArray & ba )
 QString & operator+= ( const char * str )
 QString & operator+= ( const QStringRef & str )
 QString & operator+= ( char ch )
 QString & operator+= ( QChar ch )
 bool operator< ( const QString & other ) const
 bool operator< ( const QLatin1String & other ) const
 bool operator< ( const QByteArray & other ) const
 bool operator< ( const char * other ) const
 bool operator<= ( const QString & other ) const
 bool operator<= ( const QLatin1String & other ) const
 bool operator<= ( const QByteArray & other ) const
 bool operator<= ( const char * other ) const
 QString & operator= ( const QString & other )
 QString & operator= ( const QLatin1String & str )
 QString & operator= ( const QByteArray & ba )
 QString & operator= ( const char * str )
 QString & operator= ( char ch )
 QString & operator= ( QChar ch )
 bool operator== ( const QString & other ) const
 bool operator== ( const QLatin1String & other ) const
 bool operator== ( const QByteArray & other ) const
 bool operator== ( const char * other ) const
 bool operator> ( const QString & other ) const
 bool operator> ( const QLatin1String & other ) const
 bool operator> ( const QByteArray & other ) const
 bool operator> ( const char * other ) const
 bool operator>= ( const QString & other ) const
 bool operator>= ( const QLatin1String & other ) const
 bool operator>= ( const QByteArray & other ) const
 bool operator>= ( const char * other ) const
 QCharRef operator[] ( int position )
 const QChar operator[] ( int position ) const
 QCharRef operator[] ( uint position )
 const QChar operator[] ( uint position ) const

public_slots

signals

static_public_members
 int compare ( const QString & s1, const QString & s2, Qt::CaseSensitivity cs )
 int compare ( const QString & s1, const QString & s2 )
 int compare ( const QString & s1, const QLatin1String & s2, Qt::CaseSensitivity cs = Qt::CaseSensitive )
 int compare ( const QLatin1String & s1, const QString & s2, Qt::CaseSensitivity cs = Qt::CaseSensitive )
 int compare ( const QString & s1, const QStringRef & s2, Qt::CaseSensitivity cs = Qt::CaseSensitive )
 QString fromAscii ( const char * str, int size = -1 )
 QString fromLatin1 ( const char * str, int size = -1 )
 QString fromLocal8Bit ( const char * str, int size = -1 )
 QString fromRawData ( const QChar * unicode, int size )
 QString fromStdString ( const std::string & str )
 QString fromStdWString ( const std::wstring & str )
 QString fromUcs4 ( const uint * unicode, int size = -1 )
 QString fromUtf8 ( const char * str, int size = -1 )
 QString fromUtf16 ( const ushort * unicode, int size = -1 )
 QString fromWCharArray ( const wchar_t * string, int size = -1 )
 int localeAwareCompare ( const QString & s1, const QString & s2 )
 int localeAwareCompare ( const QString & s1, const QStringRef & s2 )
 QString number ( long n, int base = 10 )
 QString number ( double n, char format = 'g', int precision = 6 )
 QString number ( ulong n, int base = 10 )
 QString number ( int n, int base = 10 )
 QString number ( uint n, int base = 10 )
 QString number ( qlonglong n, int base = 10 )
 QString number ( qulonglong n, int base = 10 )

protected_functions

reimplemented_public_functions

reimplemented_protected_functions

protected_slots

related_non_members
 bool operator!= ( const char * s1, const QString & s2 )
 const QString operator+ ( const QString & s1, const QString & s2 )
 const QString operator+ ( const QString & s1, const char * s2 )
 const QString operator+ ( const char * s1, const QString & s2 )
 const QString operator+ ( char ch, const QString & s )
 const QString operator+ ( const QString & s, char ch )
 bool operator< ( const char * s1, const QString & s2 )
 QDataStream & operator<< ( QDataStream & stream, const QString & string )
 bool operator<= ( const char * s1, const QString & s2 )
 bool operator== ( const char * s1, const QString & s2 )
 bool operator> ( const char * s1, const QString & s2 )
 bool operator>= ( const char * s1, const QString & s2 )
 QDataStream & operator>> ( QDataStream & stream, QString & string )

templateClass
false

abstractClass
false

enbeddedClass
false

flag_objects
class
QString
name
SectionFlags

parent_flag_objects

typedefed_objects
ConstIterator
Iterator
const_iterator
iterator

parent_typedefed_objects

class_objects
Null

parent_class_objects

enums
class_name
QString
name
NormalizationForm
key
NormalizationForm_D
NormalizationForm_C
NormalizationForm_KD
NormalizationForm_KC
public_flag
true
class_name
QString
name
SectionFlag
key
SectionDefault
SectionSkipEmpty
SectionIncludeLeadingSep
SectionIncludeTrailingSep
SectionCaseInsensitiveSeps
public_flag
true
class_name
QString
name
SplitBehavior
key
KeepEmptyParts
SkipEmptyParts
public_flag
true

parent_enums

parent_index

parent_name

