#!/usr/local/bin/konoha

using konoha.proc.*;

class MPIHostInfo(String hostname, int weight) {
    boolean empty() {
        return _hostname == null or _weight == 0;
    }
}

String : (MPIHostInfo hi) {
    return hi.hostname + ":" + hi.weight;
}

class MPIInfo(Path program, MPIHostInfo[] hosts) {
    int getSize() {
        return |_hosts|;
    }
    void send(Map m) {
        if (!(h=(MPIHostInfo)m).empty())
            _hosts << h;
    }
    static MPIInfo local(Path filename) {
        return new MPIInfo(filename, [new MPIHostInfo("localhost", 1)]);
    }
}

String : (MPIInfo gi) {
    String s = "";
    if (|gi| > 0) {
        s += (String)gi.hosts[0];
        if (|gi| > 1) {
            foreach (gil in gi.hosts[1 to])
                s += "," + (String)gil;
        }
    }
    return s;
}

class MPIProc(int procs, MPIInfo info) {
    boolean empty() {
        return _procs == 0 or |_info| == 0;
    }
    Proc start() {
        mpirun  = exec("which mpirun").replace("\n");
        mpiknh  = exec("which mpikonoha").replace("\n");
        abspath = exec("ls " + _info.program).replace("\n");
        absdir  = exec("dirname " + _info.program).replace("\n");
        assert(|mpirun| > 0 and |mpiknh| > 0);
        if (|abspath| > 0) {
            foreach (MPIHostInfo hi in info.hosts) {
                exec("scp " + abspath + " " + hi.hostname + ":" + absdir + "/.");
            }
            if (!empty()) {
                String[] args = [mpirun];
                args << "-np"    << (String)_procs;
                args << "--host" << (String)_info;
                args << mpiknh   << abspath;
                return new Proc(args);
            }
        }
        return null;
    }
}

info = MPIInfo.local("~/helloworld.k");
proc = new MPIProc(4, info);
foreach (String s in proc.start().getInputStream()) {
    OUT.println(s);
}
